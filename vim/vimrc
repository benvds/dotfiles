" Specify a directory for plugins (for Neovim: ~/.local/share/nvim/plugged)
call plug#begin('~/.vim/plugged')

" Plug 'scrooloose/nerdtree'
Plug 'kyazdani42/nvim-web-devicons' " for file icons
Plug 'kyazdani42/nvim-tree.lua'

Plug 'Shougo/vimproc.vim', { 'do': 'make' }
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-ragtag'
Plug 'machakann/vim-sandwich'
Plug 'overcache/NeoSolarized'
Plug 'mhinz/vim-grepper', { 'on': ['Grepper', '<plug>(GrepperOperator)'] }
Plug 'JoosepAlviste/nvim-ts-context-commentstring'
Plug 'tpope/vim-commentary'
Plug 'mattn/emmet-vim', { 'for': ['html', 'eruby', 'javascript', 'typescript', 'javascriptreact', 'typescriptreact'] }
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-eunuch'
Plug 'vim-ruby/vim-ruby'
Plug 'ntpeters/vim-better-whitespace'
Plug 'elixir-lang/vim-elixir', { 'for': 'elixir' }
Plug 'slashmili/alchemist.vim', { 'for': 'elixir' }
Plug 'cakebaker/scss-syntax.vim', { 'for': 'scss' }
Plug 'styled-components/vim-styled-components', { 'branch': 'develop' }
Plug 'mbbill/undotree'
Plug 'jeffkreeftmeijer/vim-numbertoggle'
Plug 'jeffkreeftmeijer/vim-dim'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'nvim-treesitter/nvim-treesitter'
" Plug 'vim-scripts/YankRing.vim' " messes up existing key bindings
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'glepnir/galaxyline.nvim'
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'

" TODO: move to separate limelight config file
autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!


" LSP
Plug 'hrsh7th/nvim-compe'
Plug 'neovim/nvim-lspconfig'
Plug 'kabouzeid/nvim-lspinstall'
Plug 'onsails/lspkind-nvim'
Plug 'glepnir/lspsaga.nvim'

" Snippets
Plug 'SirVer/ultisnips'
Plug 'kitagry/vs-snippets'
Plug 'hrsh7th/vim-vsnip'
Plug 'hrsh7th/vim-vsnip-integ'
" Plug 'thomasfaingnaert/vim-lsp-snippets'
" Plug 'thomasfaingnaert/vim-lsp-ultisnips'

" Plug 'neoclide/coc.nvim', {'tag': '*', 'branch': 'release'}
" let g:coc_global_extensions = [
"   \ 'coc-tsserver',
"   \ 'coc-css',
"   \ 'coc-elixir',
"   \ 'coc-html',
"   \ 'coc-json',
"   \ 'coc-python',
"   \ 'coc-solargraph',
"   \ 'coc-tsserver',
"   \ 'coc-yaml',
"   \ 'coc-emmet',
"   \ 'coc-eslint',
"   \ 'coc-prettier',
"   \ 'coc-snippets',
"   \ 'coc-syntax',
"   \ 'coc-ultisnips'
"   \ ]

" Initialize plugin system
call plug#end()


luafile $HOME/.config/nvim/lua/init.lua

" let treesitter handle javascript
autocmd BufNewFile,BufRead *.{jsx} set filetype=javascriptreact
autocmd BufNewFile,BufRead *.{tsx} set filetype=typescriptreact
autocmd BufEnter *.{js,jsx,ts,tsx} setlocal syntax=off

let g:netrw_banner = 0

" General

let mapleader="\<Space>"

syntax on                       " Turn on syntax highlighting

set number                      " Line numbers are good
set relativenumber
set ruler                       " Show current position in statusline
set showmode                    " Show current mode down the bottom
set visualbell                  " No sounds

set ignorecase                  " Ignore case when searching

set conceallevel=0

set hlsearch
" press esc to stop search highlight
nnoremap <esc><esc> :nohl<cr>

set noswapfile
set nobackup
set nowritebackup
set nowb

set autoindent
set smartindent
set smartcase
set shiftwidth=2
set softtabstop=2
set tabstop=2
set expandtab
set colorcolumn=80
set autoread
set scrolloff=5
set updatetime=250
set completeopt-=preview
set hidden

" make vim in terminal somewhat faster
set ttyfast
set lazyredraw

"key mapping for window navigation
map <C-h> <C-w>h
" map <C-j> <C-w>j
" map <C-k> <C-w>k
map <C-l> <C-w>l


" disable entering Ex mode
map Q <Nop>

nnoremap <C-t> :tabnew<CR>

"key mapping for tab navigation
nnoremap <C-k> :tabprevious<CR>
nnoremap <C-j> :tabnext<CR>

" retain visual selection after indent
vnoremap > >gv
vnoremap < <gv

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e ~/.vimrc<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

nnoremap <leader>. <c-^>        " Switch between last buffer

" write using sudo
cmap w!! w !sudo tee > /dev/null %

colorscheme NeoSolarized
let g:neosolarized_contrast = "high"
let g:neosolarized_visibility = "high"
set bg=light
" set bg=dark

set cursorline                  " Highlight the screenline of the cursor

" somehow this only works when set globally
set re=1
let ruby_no_expensive=1

if !has("nvim")
  set noballooneval
endif
let g:netrw_nobeval = 1

" http://vim.wikia.com/wiki/Search_for_visually_selected_text
" Search for selected text, forwards or backwards.
vnoremap <silent> * :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy/<C-R><C-R>=substitute(
  \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>
vnoremap <silent> # :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy?<C-R><C-R>=substitute(
  \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>


function! ToggleQuickFix()
    if getqflist({'winid' : 0}).winid
        cclose
    else
        copen
    endif
endfunction

command! -nargs=0 -bar ToggleQuickFix call ToggleQuickFix()

nnoremap <C-q> :ToggleQuickFix<CR>

" LSP
" nnoremap <silent> <c-]> <cmd>lua vim.lsp.buf.definition()<CR>
" nnoremap <silent> K     <cmd>lua vim.lsp.buf.hover()<CR>
" " nnoremap <silent> gD    <cmd>lua vim.lsp.buf.implementation()<CR>
" " nnoremap <silent> <c-k> <cmd>lua vim.lsp.buf.signature_help()<CR>
" nnoremap <silent> 1gD   <cmd>lua vim.lsp.buf.type_definition()<CR>
" " nnoremap <silent> gr    <cmd>lua vim.lsp.buf.references()<CR>
" nnoremap <silent> g0    <cmd>lua vim.lsp.buf.document_symbol()<CR>
" vnoremap <silent> gW    <cmd>lua vim.lsp.buf.workspace_symbol()<CR>
" nnoremap <silent> gd    <cmd>lua vim.lsp.buf.declaration()<CR>
" nnoremap <silent> <leader>rn    <cmd>lua vim.lsp.buf.rename()<CR>
" nnoremap <silent> [g    <cmd>lua vim.lsp.diagnostic.goto_prev()<CR>
" nnoremap <silent> ]g    <cmd>lua vim.lsp.diagnostic.goto_next()<CR>
" nnoremap <silent> gD <cmd>lua require'lspsaga.provider'.preview_definition()<CR>
" nnoremap <silent> gr <cmd>lua require'lspsaga.provider'.lsp_finder()<CR>

" LSP
nnoremap <silent> <c-]> <cmd>lua vim.lsp.buf.definition()<CR>
nnoremap <silent> gD <cmd>lua require'lspsaga.provider'.preview_definition()<CR>
nnoremap <silent> gr <cmd>lua require'lspsaga.provider'.lsp_finder()<CR>
nmap <silent> <C-Space> <cmd>lua require('lspsaga.codeaction').code_action()<CR>
nnoremap <silent> <Leader>ca <cmd>lua require('lspsaga.codeaction').code_action()<CR>
vnoremap <silent> <Leader>ca <cmd>'<,'>lua require('lspsaga.codeaction').range_code_action()<CR>
nnoremap <silent> <Leader>cr <cmd>lua require('lspsaga.rename').rename()<CR>
nnoremap <silent> <Leader>cf <cmd>lua vim.lsp.buf.formatting()<CR>
vnoremap <silent> <Leader>cf <cmd>'<.'>lua vim.lsp.buf.range_formatting()<CR>
nnoremap <silent> K <cmd>lua require('lspsaga.hover').render_hover_doc()<CR>
" nnoremap <silent> <C-k> <cmd>lua require('lspsaga.signaturehelp').signature_help()<CR>
nnoremap <silent> [g <cmd>lua require'lspsaga.diagnostic'.lsp_jump_diagnostic_prev()<CR>
nnoremap <silent> ]g <cmd>lua require'lspsaga.diagnostic'.lsp_jump_diagnostic_next()<CR>
nnoremap <silent> <C-f> <cmd>lua require('lspsaga.action').smart_scroll_with_saga(1)<CR>
nnoremap <silent> <C-b> <cmd>lua require('lspsaga.action').smart_scroll_with_saga(-1)<CR>
nnoremap <silent> <leader>cl <cmd>lua require'lspsaga.diagnostic'.show_line_diagnostics()<CR>

" Compe
inoremap <silent><expr> <C-Space> compe#complete()
inoremap <silent><expr> <CR>      compe#confirm('<CR>')
" inoremap <silent><expr> <C-f>     compe#scroll({ 'delta': +4 })
" inoremap <silent><expr> <C-d>     compe#scroll({ 'delta': -4 })

autocmd BufWritePre *.js lua vim.lsp.buf.formatting_sync(nil, 100)
autocmd BufWritePre *.ts lua vim.lsp.buf.formatting_sync(nil, 100)
autocmd BufWritePre *.jsx lua vim.lsp.buf.formatting_sync(nil, 100)
autocmd BufWritePre *.tsx lua vim.lsp.buf.formatting_sync(nil, 100)

let g:python3_host_prog = '/Users/benvds/.asdf/shims/python'
