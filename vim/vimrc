" Specify a directory for plugins (for Neovim: ~/.local/share/nvim/plugged)
call plug#begin('~/.vim/plugged')

" Plug 'scrooloose/nerdtree'
Plug 'kyazdani42/nvim-web-devicons' " for file icons
Plug 'kyazdani42/nvim-tree.lua'

Plug 'Shougo/vimproc.vim', { 'do': 'make' }
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-ragtag'
Plug 'machakann/vim-sandwich'
Plug 'overcache/NeoSolarized'
Plug 'mhinz/vim-grepper', { 'on': ['Grepper', '<plug>(GrepperOperator)'] }
Plug 'SirVer/ultisnips'
Plug 'tpope/vim-commentary'
Plug 'mattn/emmet-vim', { 'for': ['html', 'eruby', 'javascript', 'typescript'] }
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-eunuch'
Plug 'vim-ruby/vim-ruby'
Plug 'ntpeters/vim-better-whitespace'
Plug 'elixir-lang/vim-elixir', { 'for': 'elixir' }
Plug 'slashmili/alchemist.vim', { 'for': 'elixir' }
Plug 'cakebaker/scss-syntax.vim', { 'for': 'scss' }
Plug 'styled-components/vim-styled-components', { 'branch': 'develop' }
Plug 'mbbill/undotree'
Plug 'jeffkreeftmeijer/vim-numbertoggle'
Plug 'jeffkreeftmeijer/vim-dim'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug '/usr/local/opt/fzf'
Plug 'nvim-treesitter/nvim-treesitter'

Plug 'neoclide/coc.nvim', {'tag': '*', 'branch': 'release'}
let g:coc_global_extensions = [
  \ 'coc-tsserver',
  \ 'coc-css',
  \ 'coc-elixir',
  \ 'coc-html',
  \ 'coc-json',
  \ 'coc-python',
  \ 'coc-solargraph',
  \ 'coc-tsserver',
  \ 'coc-yaml',
  \ 'coc-emmet',
  \ 'coc-eslint',
  \ 'coc-prettier',
  \ 'coc-snippets',
  \ 'coc-syntax',
  \ 'coc-ultisnips'
  \ ]

" Initialize plugin system
call plug#end()


luafile $HOME/.config/nvim/lua/init.lua

" let treesitter handle javascript
autocmd BufNewFile,BufRead *.{js,jsx} set filetype=javascriptreact
autocmd BufNewFile,BufRead *.{ts,tsx} set filetype=typescriptreact
autocmd BufEnter *.{js,jsx,ts,tsx} setlocal syntax=off

let g:netrw_banner = 0

" General

let mapleader="\<Space>"

syntax on                       " Turn on syntax highlighting

set number                      " Line numbers are good
set relativenumber
set ruler                       " Show current position in statusline
set showmode                    " Show current mode down the bottom
set visualbell                  " No sounds

set ignorecase                  " Ignore case when searching

set conceallevel=0

set hlsearch
" press esc to stop search highlight
nnoremap <esc><esc> :nohl<cr>

set noswapfile
set nobackup
set nowritebackup
set nowb

set autoindent
set smartindent
set smartcase
set shiftwidth=2
set softtabstop=2
set tabstop=2
set expandtab
set colorcolumn=80
set autoread
set scrolloff=5
set updatetime=250
set completeopt-=preview
set hidden

" make vim in terminal somewhat faster
set ttyfast
set lazyredraw

"key mapping for window navigation
map <C-h> <C-w>h
" map <C-j> <C-w>j
" map <C-k> <C-w>k
map <C-l> <C-w>l

" nnoremap <leader>jd :YcmCompleter GoTo<CR>
" nnoremap <leader>jr :YcmCompleter GoToReferences<CR>

"key mapping for tab navigation
nnoremap <C-k> :tabprevious<CR>
nnoremap <C-j> :tabnext<CR>

" retain visual selection after indent
vnoremap > >gv
vnoremap < <gv

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e ~/.vimrc<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

nnoremap <leader>. <c-^>        " Switch between last buffer

" write using sudo
cmap w!! w !sudo tee > /dev/null %

colorscheme NeoSolarized
let g:neosolarized_contrast = "high"
let g:neosolarized_visibility = "high"
set bg=light

set cursorline                  " Highlight the screenline of the cursor

" somehow this only works when set globally
set re=1
let ruby_no_expensive=1

if !has("nvim")
  set noballooneval
endif
let g:netrw_nobeval = 1

" http://vim.wikia.com/wiki/Search_for_visually_selected_text
" Search for selected text, forwards or backwards.
vnoremap <silent> * :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy/<C-R><C-R>=substitute(
  \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>
vnoremap <silent> # :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy?<C-R><C-R>=substitute(
  \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>
