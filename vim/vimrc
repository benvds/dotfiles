" Specify a directory for plugins (for Neovim: ~/.local/share/nvim/plugged)
call plug#begin('~/.vim/plugged')

Plug 'scrooloose/nerdtree'
Plug 'Shougo/vimproc.vim', { 'do': 'make' }
" Plug 'ctrlpvim/ctrlp.vim'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-ragtag'
Plug 'tpope/vim-fugitive'
" Plug 'tpope/vim-surround'
Plug 'machakann/vim-sandwich'
", { 'for': ['javascript', 'typescript'] }
Plug 'yuezk/vim-js'
Plug 'maxmellon/vim-jsx-pretty'
Plug 'overcache/NeoSolarized'
Plug 'wincent/ferret'
Plug 'SirVer/ultisnips'
Plug 'tomtom/tcomment_vim'
Plug 'mattn/emmet-vim', { 'for': ['html', 'eruby', 'javascript', 'typescript'] }
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-eunuch'
Plug 'vim-ruby/vim-ruby'
Plug 'itchyny/lightline.vim'
Plug 'ntpeters/vim-better-whitespace'
Plug 'elixir-lang/vim-elixir', { 'for': 'elixir' }
Plug 'slashmili/alchemist.vim', { 'for': 'elixir' }
Plug 'cakebaker/scss-syntax.vim', { 'for': 'scss' }
Plug 'leafgarland/typescript-vim'
Plug 'peitalin/vim-jsx-typescript'
Plug 'styled-components/vim-styled-components', { 'branch': 'develop' }
Plug 'mbbill/undotree'
Plug 'jeffkreeftmeijer/vim-numbertoggle'
Plug 'jeffkreeftmeijer/vim-dim'
if has("gui_running")
  Plug 'L-TChen/auto-dark-mode.vim'
endif
Plug 'neoclide/coc.nvim', {'tag': '*', 'branch': 'release'}
let g:coc_global_extensions = [
  \ 'coc-tsserver',
  \ 'coc-css',
  \ 'coc-elixir',
  \ 'coc-html',
  \ 'coc-json',
  \ 'coc-python',
  \ 'coc-solargraph',
  \ 'coc-tsserver',
  \ 'coc-yaml',
  \ 'coc-emmet',
  \ 'coc-eslint',
  \ 'coc-prettier',
  \ 'coc-snippets',
  \ 'coc-syntax',
  \ 'coc-ultisnips'
  \ ]
" Plug 'pangloss/vim-javascript', { 'for': ['javascript'] }
" Plug 'editorconfig/editorconfig-vim' " broken 2018-10-15
" Plug 'Valloric/YouCompleteMe'
" Plug 'ervandew/supertab'
" Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf.vim'
" Plug 'honza/vim-snippets'
" Plug 'tpope/vim-endwise'
" Plug 'w0rp/ale'
" Plug 'tpope/vim-markdown', { 'for': 'markdown' }
" Plug 'Quramy/tsuquyomi', { 'for': 'typescript' }

" Initialize plugin system
call plug#end()


" au BufNewFile,BufRead *.tsx set filetype=typescript.tsx
autocmd BufNewFile,BufRead *.jsx set filetype=javascriptreact
autocmd BufNewFile,BufRead *.tsx set filetype=typescriptreact
autocmd BufNewFile,BufRead *.jsx set syntax=javascript.jsx
autocmd BufNewFile,BufRead *.tsx set syntax=typescript.tsx

" vim-styled-components: prevent syntax highlighting getting out of sync
autocmd BufEnter *.{js,jsx,ts,tsx} :syntax sync fromstart
autocmd BufLeave *.{js,jsx,ts,tsx} :syntax sync clear

let g:netrw_banner = 0

" allow jsx in regular js extensions
" let g:jsx_ext_required = 0

" General

let mapleader="\<Space>"

syntax on                       " Turn on syntax highlighting

set number                      " Line numbers are good
set relativenumber
set ruler                       " Show current position in statusline
set showmode                    " Show current mode down the bottom
set visualbell                  " No sounds

set ignorecase                  " Ignore case when searching

set conceallevel=0

set hlsearch
" press esc to stop search highlight
nnoremap <esc><esc> :nohl<cr>

set noswapfile
set nobackup
set nowritebackup
set nowb

set autoindent
set smartindent
set smartcase
set shiftwidth=2
set softtabstop=2
set tabstop=2
set expandtab
set colorcolumn=80
set autoread
set scrolloff=5
set updatetime=250
set completeopt-=preview
set hidden

" make vim in terminal somewhat faster
set ttyfast
set lazyredraw

"key mapping for window navigation
map <C-h> <C-w>h
" map <C-j> <C-w>j
" map <C-k> <C-w>k
map <C-l> <C-w>l

" nnoremap <leader>jd :YcmCompleter GoTo<CR>
" nnoremap <leader>jr :YcmCompleter GoToReferences<CR>

"key mapping for tab navigation
nnoremap <C-k> :tabprevious<CR>
nnoremap <C-j> :tabnext<CR>

" retain visual selection after indent
vnoremap > >gv
vnoremap < <gv

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e ~/.vimrc<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

nnoremap <leader>. <c-^>        " Switch between last buffer

" write using sudo
cmap w!! w !sudo tee > /dev/null %

colorscheme NeoSolarized
let g:neosolarized_contrast = "high"
let g:neosolarized_visibility = "high"
set bg=light
" set bg=dark

set cursorline                  " Highlight the screenline of the cursor

if has("gui_running")
  set linespace=5
  set guifont=Fira\ Code\ Light:h12
  set columns=200
  set lines=45
endif

" try to speed up ruby
" let g:ruby_path="/usr/bin/ruby"

" somehow this only works when set globally
set re=1
let ruby_no_expensive=1

if !has("nvim")
  set noballooneval
endif
let g:netrw_nobeval = 1

augroup ft_rb
    au!
    " fix the SLOOOW syntax highlighting
    au FileType ruby setlocal re=1 foldmethod=manual
augroup END

" http://vim.wikia.com/wiki/Search_for_visually_selected_text
" Search for selected text, forwards or backwards.
vnoremap <silent> * :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy/<C-R><C-R>=substitute(
  \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>
vnoremap <silent> # :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy?<C-R><C-R>=substitute(
  \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>

" fzf
nnoremap <silent> <C-p> :Files<CR>
nnoremap <silent> <C-g> :GFiles<CR>
nnoremap <silent> <C-o> :Buffers<CR>
nnoremap <silent> <C-f> :Rg! 
